// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiV1ServicesClient is the client API for ApiV1Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiV1ServicesClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	CreateAccount(ctx context.Context, in *CreateAccounttRequest, opts ...grpc.CallOption) (*CreateAccountReply, error)
	RefreshActivationLinkAccount(ctx context.Context, in *RefreshActivationLinkAccountRequest, opts ...grpc.CallOption) (*RefreshActivationLinkAccountResponse, error)
	SignIn(ctx context.Context, in *SigninRequest, opts ...grpc.CallOption) (*SigninReply, error)
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenReply, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenReply, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectReply, error)
}

type apiV1ServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewApiV1ServicesClient(cc grpc.ClientConnInterface) ApiV1ServicesClient {
	return &apiV1ServicesClient{cc}
}

func (c *apiV1ServicesClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/ApiV1Services/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiV1ServicesClient) CreateAccount(ctx context.Context, in *CreateAccounttRequest, opts ...grpc.CallOption) (*CreateAccountReply, error) {
	out := new(CreateAccountReply)
	err := c.cc.Invoke(ctx, "/ApiV1Services/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiV1ServicesClient) RefreshActivationLinkAccount(ctx context.Context, in *RefreshActivationLinkAccountRequest, opts ...grpc.CallOption) (*RefreshActivationLinkAccountResponse, error) {
	out := new(RefreshActivationLinkAccountResponse)
	err := c.cc.Invoke(ctx, "/ApiV1Services/RefreshActivationLinkAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiV1ServicesClient) SignIn(ctx context.Context, in *SigninRequest, opts ...grpc.CallOption) (*SigninReply, error) {
	out := new(SigninReply)
	err := c.cc.Invoke(ctx, "/ApiV1Services/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiV1ServicesClient) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenReply, error) {
	out := new(VerifyTokenReply)
	err := c.cc.Invoke(ctx, "/ApiV1Services/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiV1ServicesClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenReply, error) {
	out := new(RefreshTokenReply)
	err := c.cc.Invoke(ctx, "/ApiV1Services/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiV1ServicesClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectReply, error) {
	out := new(CreateProjectReply)
	err := c.cc.Invoke(ctx, "/ApiV1Services/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiV1ServicesServer is the server API for ApiV1Services service.
// All implementations must embed UnimplementedApiV1ServicesServer
// for forward compatibility
type ApiV1ServicesServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	CreateAccount(context.Context, *CreateAccounttRequest) (*CreateAccountReply, error)
	RefreshActivationLinkAccount(context.Context, *RefreshActivationLinkAccountRequest) (*RefreshActivationLinkAccountResponse, error)
	SignIn(context.Context, *SigninRequest) (*SigninReply, error)
	VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenReply, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenReply, error)
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectReply, error)
	mustEmbedUnimplementedApiV1ServicesServer()
}

// UnimplementedApiV1ServicesServer must be embedded to have forward compatible implementations.
type UnimplementedApiV1ServicesServer struct {
}

func (UnimplementedApiV1ServicesServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedApiV1ServicesServer) CreateAccount(context.Context, *CreateAccounttRequest) (*CreateAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedApiV1ServicesServer) RefreshActivationLinkAccount(context.Context, *RefreshActivationLinkAccountRequest) (*RefreshActivationLinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshActivationLinkAccount not implemented")
}
func (UnimplementedApiV1ServicesServer) SignIn(context.Context, *SigninRequest) (*SigninReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedApiV1ServicesServer) VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedApiV1ServicesServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedApiV1ServicesServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedApiV1ServicesServer) mustEmbedUnimplementedApiV1ServicesServer() {}

// UnsafeApiV1ServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiV1ServicesServer will
// result in compilation errors.
type UnsafeApiV1ServicesServer interface {
	mustEmbedUnimplementedApiV1ServicesServer()
}

func RegisterApiV1ServicesServer(s grpc.ServiceRegistrar, srv ApiV1ServicesServer) {
	s.RegisterService(&ApiV1Services_ServiceDesc, srv)
}

func _ApiV1Services_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV1ServicesServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiV1Services/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV1ServicesServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiV1Services_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccounttRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV1ServicesServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiV1Services/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV1ServicesServer).CreateAccount(ctx, req.(*CreateAccounttRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiV1Services_RefreshActivationLinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshActivationLinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV1ServicesServer).RefreshActivationLinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiV1Services/RefreshActivationLinkAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV1ServicesServer).RefreshActivationLinkAccount(ctx, req.(*RefreshActivationLinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiV1Services_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigninRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV1ServicesServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiV1Services/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV1ServicesServer).SignIn(ctx, req.(*SigninRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiV1Services_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV1ServicesServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiV1Services/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV1ServicesServer).VerifyToken(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiV1Services_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV1ServicesServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiV1Services/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV1ServicesServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiV1Services_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV1ServicesServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiV1Services/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV1ServicesServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiV1Services_ServiceDesc is the grpc.ServiceDesc for ApiV1Services service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiV1Services_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ApiV1Services",
	HandlerType: (*ApiV1ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ApiV1Services_SayHello_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _ApiV1Services_CreateAccount_Handler,
		},
		{
			MethodName: "RefreshActivationLinkAccount",
			Handler:    _ApiV1Services_RefreshActivationLinkAccount_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _ApiV1Services_SignIn_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _ApiV1Services_VerifyToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _ApiV1Services_RefreshToken_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ApiV1Services_CreateProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_v1.proto",
}
